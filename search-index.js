var searchIndex = {};
searchIndex["gc"] = {"doc":"Thread-local garbage-collected boxes (The `Gc<T>` type).","items":[[3,"Gc","gc","A garbage-collected pointer type over an immutable value.",null,null],[3,"GcCell","","A mutable memory location with dynamically checked borrow rules that can be used inside of a garbage-collected pointer.",null,null],[3,"GcCellRef","","A wrapper type for an immutably borrowed value from a `GcCell<T>`.",null,null],[3,"GcCellRefMut","","A wrapper type for a mutably borrowed value from a `GcCell<T>`.",null,null],[5,"force_collect","","Immediately triggers a garbage collection on the current thread.",null,{"inputs":[],"output":null}],[5,"finalizer_safe","","",null,{"inputs":[],"output":{"name":"bool"}}],[8,"Finalize","","The Finalize trait. Can be specialized for a specific type to define finalization logic for that type.",null,null],[11,"finalize","","",0,{"inputs":[{"name":"self"}],"output":null}],[8,"Trace","","The Trace trait, which needs to be implemented on garbage-collected objects.",null,null],[10,"trace","","Marks all contained `Gc`s.",1,{"inputs":[{"name":"self"}],"output":null}],[10,"root","","Increments the root-count of all contained `Gc`s.",1,{"inputs":[{"name":"self"}],"output":null}],[10,"unroot","","Decrements the root-count of all contained `Gc`s.",1,{"inputs":[{"name":"self"}],"output":null}],[10,"finalize_glue","","Runs Finalize::finalize() on this object and all contained subobjects",1,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Constructs a new `Gc<T>` with the given value.",2,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"trace","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"root","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"unroot","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"finalize_glue","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",2,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",2,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"new","","Creates a new `GcCell` containing `value`.",3,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"into_inner","","Consumes the `GcCell`, returning the wrapped value.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow","","Immutably borrows the wrapped value.",3,{"inputs":[{"name":"self"}],"output":{"name":"gccellref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",3,{"inputs":[{"name":"self"}],"output":{"name":"gccellrefmut"}}],[11,"trace","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"root","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"unroot","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"finalize_glue","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"gccell"}],"output":{"name":"ordering"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"unsafe_empty_trace","","This rule implements the trace methods with empty implementations.",null,null],[14,"custom_trace","","This rule implements the trace method.",null,null],[11,"finalize","","",0,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[8,"Finalize"],[8,"Trace"],[3,"Gc"],[3,"GcCell"],[3,"GcCellRef"],[3,"GcCellRefMut"]]};
initSearch(searchIndex);
